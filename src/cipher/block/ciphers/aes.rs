use generic_array::typenum::U16;
use generic_array::GenericArray;

use crate::cipher::stream::VernamCipher;
use crate::cipher::stream::VernamCipherError;

use super::Block;
use super::BlockCipher;

#[derive(Copy, Clone)]
enum KeyLength {
    Length128 = 128,
    Length192 = 192,
    Length256 = 256,
}

// Aes implements BlockCipher for the Advanced Encryption Standard
// formerly known as Rijndael, as defined in the U.S. Federal Information
// Processing Standards Publication 197. The implementation's conformance is
// verified from the National Institute of Standards and Technology's AES Algorithm
// Validaton Suite.
pub struct Aes {
    key: Vec<u8>,
    key_length: KeyLength,
}

impl BlockCipher<U16> for Aes {
    fn new(key: Vec<u8>) -> Self {
        let key_length = match key.len() {
            16 => KeyLength::Length128,
            24 => KeyLength::Length192,
            32 => KeyLength::Length256,
            _ => {
                // error out
                todo!()
            }
        };

        Aes { key, key_length }
    }

    // AES is based on a design principle known as a substitution–permutation network,
    // and is efficient in both software and hardware. Unlike its predecessor DES,
    // AES does not use a Feistel network. AES is a variant of Rijndael, with a fixed
    // block size of 128 bits, and a key size of 128, 192, or 256 bits.

    // By contrast, Rijndael per se is specified with block and key sizes that may be
    // any multiple of 32 bits, with a minimum of 128 and a maximum of 256 bits. Most
    // AES calculations are done in a particular finite field.

    // AES operates on a 4 × 4 column-major order array of 16 bytes b0, b1, ..., b15
    // termed the state.
    fn encrypt_block(&self, block: Block<U16>) -> Block<U16> {
        // =============================================================================
        // High-level description of the algorithm
        // =============================================================================
        // 1. KeyExpansion – round keys are derived from the cipher key using the AES key
        // schedule. AES requires a separate 128-bit round key block for each round plus one more.
        let rounds = match self.key_length {
            KeyLength::Length128 => 10,
            KeyLength::Length192 => 12,
            KeyLength::Length256 => 14,
        };
        let round_keys = self.key_expansion(rounds);

        // 2. Initial round key addition:
        // AddRoundKey – each byte of the state is combined with a byte of the round key
        //               using bitwise xor.

        let mut encrypted_block = block;
        encrypted_block = self.add_round_key(encrypted_block, round_keys[0]);

        // 3. Rounds (9, 11 or 13)
        // ---1. SubBytes – a non-linear substitution step where each byte is replaced
        //                  with another according to a lookup table.
        // ---2. ShiftRows – a transposition step where the last three rows of the state
        //                   are shifted cyclically a certain number of steps.
        // ---3. MixColumns – a linear mixing operation which operates on the columns of
        //                    the state, combining the four bytes in each column.
        // ---4. AddRoundKey

        for r in 1..rounds {
            encrypted_block = self.sub_bytes(encrypted_block);
            encrypted_block = self.shift_rows(encrypted_block);
            encrypted_block = self.mix_cols(encrypted_block);
            encrypted_block = self.add_round_key(encrypted_block, round_keys[r]);
        }

        // 4. Final round (making 10, 12 or 14 rounds in total):
        // ---1. SubBytes
        // ---2. ShiftRows
        // ---3. AddRoundKey
        encrypted_block = self.sub_bytes(encrypted_block);
        encrypted_block = self.shift_rows(encrypted_block);
        encrypted_block = self.add_round_key(encrypted_block, round_keys[rounds]);

        encrypted_block
    }

    fn decrypt_block(&self, block: Block<U16>) -> Block<U16> {
        let rounds = match self.key_length {
            KeyLength::Length128 => 10,
            KeyLength::Length192 => 12,
            KeyLength::Length256 => 14,
        };

        let round_keys = self.key_expansion(rounds);

        let mut decrypted_block = block;
        decrypted_block = self.add_round_key(decrypted_block, round_keys[rounds]);

        for r in (1..rounds).rev() {
            decrypted_block = self.inv_sub_bytes(decrypted_block);
            decrypted_block = self.inv_shift_rows(decrypted_block);
            // TODO: decrypted_block = self.inv_mix_cols(decrypted_block);
            decrypted_block = self.add_round_key(decrypted_block, round_keys[r]);
        }

        decrypted_block = self.inv_sub_bytes(decrypted_block);
        decrypted_block = self.inv_shift_rows(decrypted_block);
        decrypted_block = self.add_round_key(decrypted_block, round_keys[0]);

        decrypted_block
    }
}

impl Aes {
    // AES uses a key schedule to expand a short key into a number of separate
    // round keys. The three AES variants have a different number of rounds.
    // Each variant requires a separate 128-bit round key for each round plus one
    // more. The key schedule produces the needed round keys from the initial key.
    // Using different keys for each round to protect against slide attacks[0]

    // [0]: https://en.wikipedia.org/wiki/Slide_attack

    // see more: https://en.wikipedia.org/wiki/AES_key_schedule
    fn key_expansion(&self, rounds: usize) -> Vec<Block<U16>> {
        let words_per_key_size = self.key_length as usize / 32; // 4, 6, or 8
        let word_length = 4 * (rounds + 1); // because round_keys are always 128 bits, 4*32=128
        let mut u32_words = vec![0; word_length];
        let mut i = 0;

        // 1. K0 is set to the root key
        // so build u32 words from the key's u8s and set them
        while i < words_per_key_size {
            let word = u32::from_be_bytes([
                self.key[i * 4],
                self.key[i * 4 + 1],
                self.key[i * 4 + 2],
                self.key[i * 4 + 3],
            ]);

            u32_words[i] = word;
            i += 1;
        }

        // 2. build 128 bit round keys from K1 -> K10/12/14
        // since the key schedule operates on 32 bit words, we have to gen {4*rounds} words
        let mut prev;
        while i < u32_words.len() {
            prev = u32_words[i - 1];
            if i % words_per_key_size == 0 {
                // TODO why -1?
                prev = self.sub_word(prev.rotate_left(8)) ^ RCON[i / words_per_key_size];
            } else if words_per_key_size > 6 && i % words_per_key_size == 4 {
                prev = self.sub_word(prev);
            }

            u32_words[i] = u32_words[i - words_per_key_size] ^ prev;
            i += 1;
        }

        // 3. coalesce the {4 * rounds} u32 words into 10/12/14 u8 round keys
        let round_key_buffers = u32_words
            .chunks(4) // since round keys are 128 bits
            .map(|chunked_key_words| {
                // Vec::from(u32::to_be_bytes(chunked_key_words))) will not work
                // b/c chunked_key-wirds is a &[u32], so we .iter.flat_map(|&|)
                chunked_key_words
                    .iter()
                    .flat_map(|&word| u32::to_be_bytes(word).to_vec())
                    .collect::<Vec<u8>>()
            })
            .map(|buffered_round_key| {
                GenericArray::<u8, U16>::clone_from_slice(&buffered_round_key)
            })
            .collect();

        round_key_buffers
    }

    fn sub_word(&self, word: u32) -> u32 {
        let mut bytes = u32::to_be_bytes(word);
        for i in 0..bytes.len() {
            bytes[i] = SBOX[bytes[i] as usize]; // SAFETY: u8 will never be larger than 32 bits
        }

        u32::from_be_bytes(bytes)
    }

    // The AddRoundKey step combines a round key with the state with the XOR operation.
    // For each round, a round key is derived from the main key using Rijndael's
    // key schedule; each round key is the same size as the state.
    fn add_round_key(&self, input: Block<U16>, key: Block<U16>) -> Block<U16> {
        let a = input.into_iter();
        let b = key.into_iter();
        let xor_cipher = VernamCipher::new(a, b);

        let output = xor_cipher
            .collect::<Result<Vec<u8>, VernamCipherError>>()
            .unwrap(); // SAFETY: VermamCipherError only contains unequal input length
                       // which can't happen since both input and key are typed with U16

        output.into_iter().collect()
    }

    // In the SubBytes step, each byte, a_{i,j} in the state array is replaced with
    // a SubByte S(a_{i,j}) using an 8-bit substitution box. Note that before round
    // 0, the state array is simply the plaintext/input.

    // ***This operation provides the non-linearity in the cipher.***

    // The S-box used is derived from the multiplicative inverse over GF(2^8), known
    // to have good non-linearity properties. To avoid attacks based on simple
    // algebraic properties, the S-box is constructed by combining
    // 1. the inverse function
    // 2. invertible affine transformation

    // The S-box is also chosen to avoid any fixed points (and so is a derangement),
    // i.e., S(a_{i,j}) != a_{i,j}
    // and also any opposite fixed points, i.e. S(a_{i,j}) XOR a_{i,j} != FF_{16}

    // see more: https://en.wikipedia.org/wiki/Rijndael_S-box
    fn sub_bytes(&self, input: Block<U16>) -> Block<U16> {
        let mut output = input;

        for i in 0..input.len() {
            output[i] = SBOX[input[i] as usize];
        }

        output
    }

    fn inv_sub_bytes(&self, input: Block<U16>) -> Block<U16> {
        let mut output = input;

        for i in 0..input.len() {
            output[i] = SBOX[input[i] as usize];
        }

        output
    }

    // The ShiftRows step operates on the rows of the state; it cyclically shifts
    // the bytes in each row by a certain offset. For AES, the first row is left
    // unchanged. Each byte of the second row is shifted one to the left.
    // Similarly, the third and fourth rows are shifted by offsets of two and
    // three respectively.

    // In this way, each column of the output state of the ShiftRows step is
    // composed of bytes from each column of the input state. The importance of
    // this step is to avoid the columns being encrypted independently, in which
    // case AES would degenerate into four independent block ciphers.
    fn shift_rows(&self, input: Block<U16>) -> Block<U16> {
        let mut output = input;

        // memory
        // 0  1  2  3
        // 4  5  6  7
        // 8  9  10 11
        // 12 13 14 15

        // logical
        // 0  4  8  12
        // 1  5  9  13
        // 2  6 10  14
        // 3  7 11  15

        // multiplying by 5 allows us to
        // 1. skip over rows (memory) i.e., 4*5%16= 20%16=4, and 5*5%16= 25&16=9
        // 2. rotate based on column (memory)
        for i in 0..input.len() {
            output[i] = input[(i * 5) % 16];
        }

        output
    }

    fn inv_shift_rows(&self, input: Block<U16>) -> Block<U16> {
        let mut output = input;

        // shift second row by 1
        let temp = output[13];
        output[13] = output[9];
        output[9] = output[5];
        output[5] = output[1];
        output[1] = temp;

        // shift third row by 2
        output.swap(2, 10);
        output.swap(6, 14);

        // shift fourth row by 3
        let temp = output[15];
        output[15] = output[3];
        output[3] = output[7];
        output[7] = output[11];
        output[11] = output[15];

        output
    }

    // In the MixColumns step, the four bytes of each column (32 bits) of the state
    // are combined using an invertible linear transformation. Together, with
    // ShiftRows, MixColumns provides diffusion in the cipher.

    // see more: https://en.wikipedia.org/wiki/Rijndael_MixColumns
    fn mix_cols(&self, input: Block<U16>) -> Block<U16> {
        let mut output = GenericArray::default();

        for i in 0..4 {
            // logical columns are layed out as rows in memory
            let index_start = i * 4;
            let col = [
                input[index_start],
                input[index_start + 1],
                input[index_start + 2],
                input[index_start + 3],
            ];
            let mixed_col = self.mix_col(col);

            output[index_start..index_start + 4].copy_from_slice(&mixed_col);
        }

        output
    }

    // mix_col mixes a single column 2 state by applying an invertible linear
    // transformation. In particular, the column is used as a vector and is
    // multiplied by the following circulant[0] MDS matrix[1] under Rijndael's finite field.

    // 2 3 1 1
    // 1 2 3 1
    // 1 1 2 3
    // 3 1 1 2

    // This operation is similar to the Hill Cipher[2]

    // [0]: https://en.wikipedia.org/wiki/Circulant_matrix
    // [1]: https://en.wikipedia.org/wiki/MDS_matrix
    // [2]: https://en.wikipedia.org/wiki/Hill_cipher

    fn mix_col(&self, input: [u8; 4]) -> [u8; 4] {
        let mut output = [0u8; 4];

        output[0] =
            self.gf_mult(0x02, input[0]) ^ self.gf_mult(0x03, input[1]) ^ input[2] ^ input[3];
        output[1] =
            input[0] ^ self.gf_mult(0x02, input[1]) ^ self.gf_mult(0x03, input[2]) ^ input[3];
        output[2] =
            input[0] ^ input[1] ^ self.gf_mult(0x02, input[2]) ^ self.gf_mult(0x03, input[3]);
        output[3] =
            self.gf_mult(0x03, input[0]) ^ input[1] ^ input[2] ^ self.gf_mult(0x02, input[3]);

        output
    }

    // gf_mult multiplies two bytes which represent the coefficients of polynomials
    // under GF(2^8) with modulus x^8 + x^4 + x^3 + x + 1, Rijdael's finite field

    // at the start and end of the algorithm, and the start and end of each
    // iteration, this invariant is true: a b + p is the product
    // - this is obviously true when the algorithm starts
    // - and when the algorithm terminates, a or b will be zero so p will contain the product.

    // see more
    // - https://en.wikipedia.org/wiki/Finite_field_arithmetic#Rijndael's_(AES)_finite_field
    // - https://en.wikipedia.org/wiki/Multiplication_algorithm#Russian_peasant_multiplication
    fn gf_mult(&self, mut a: u8, mut b: u8) -> u8 {
        let mut p = 0;

        for _ in 0..8 {
            // 1. if the rightmost bit of b is set, XOR the product p by a.
            //    - this is polynomial addition
            if (b & 0x1) != 0 {
                p ^= a;
            }

            // 2. shift b one bit to the right, discarding the rightmost bit, and
            //    making the leftmost bit have a value of zero
            //    - this divides the polynomial by x, discarding the x0 term.
            b >>= 1;

            // 3. Keep track of whether the leftmost bit of a is set to one
            let carry = (a & 0x80) != 0;

            // 4. shift a one bit to the left, discarding the leftmost bit, and
            //    making the new rightmost bit zero.
            //    - this multiplies the polynomial by x,
            //    - but we still need to take account of carry, the coefficient of x^7
            a <<= 1;

            // 5. if carry had a value of one, XOR a with 0x1b (00011011 in binary).
            //    0x1b corresponds to the irreducible polynomial with the high term
            //    eliminated.
            //    - conceptually, the high term of the irreducible polynomial and
            //      carry add modulo 2 to 0.
            if carry {
                a ^= 0x1b;
            }
        }

        p // p now has the product
    }
}

// The S-box maps an 8-bit input, c, to an 8-bit output, s = S(c).
// Both the input and output are interpreted as polynomials over GF(2).

// 1. First, the input is mapped to its multiplicative inverse in GF(2^8) = GF(2)
// [x]/(x8 + x4 + x3 + x + 1), Rijndael's finite field. Zero, as the identity, is mapped to itself.
// This transformation is known as the Nyberg S-box after its inventor Kaisa Nyberg.

// 2. The multiplicative inverse is then transformed using an affine transformation.
const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

// Inverse substitution look-up table used during decryption rounds.
const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

const RCON: [u32; 11] = [
    0x00_00_00_00,
    0x01_00_00_00,
    0x02_00_00_00,
    0x04_00_00_00,
    0x08_00_00_00,
    0x10_00_00_00,
    0x20_00_00_00,
    0x40_00_00_00,
    0x80_00_00_00,
    0x1B_00_00_00,
    0x36_00_00_00,
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add_round_key() {
        #[rustfmt::skip]
        let state = [
            0xe1, 0x53, 0x30, 0x22,
            0xb7, 0xdb, 0xf3, 0xa3,
            0x4c, 0xa2, 0x06, 0xd4,
            0x3d, 0x72, 0xc4, 0xdf,
        ];
        let state_input = GenericArray::clone_from_slice(&state);
        let key = *b"abcdefghijklmnop";
        let key_input = GenericArray::clone_from_slice(&key);

        let aes = Aes {
            key: Vec::new(),
            key_length: KeyLength::Length128,
        };

        let actual_output = aes.add_round_key(state_input, key_input);
        #[rustfmt::skip]
        let expected_output = [
            0x80, 0x31, 0x53, 0x46,
            0xd2, 0xbd, 0x94, 0xcb,
            0x25, 0xc8, 0x6d, 0xb8,
            0x50, 0x1c, 0xab, 0xaf,
        ];

        assert_eq!(actual_output.as_slice(), expected_output);
    }

    #[test]
    fn test_key_sbox_appendix_c_one() {
        #[rustfmt::skip]
        let keys = [
            [0x10, 0xa5, 0x88, 0x69, 0xd7, 0x4b, 0xe5, 0xa3, 0x74, 0xcf, 0x86, 0x7c, 0xfb, 0x47, 0x38, 0x59],
            [0xca, 0xea, 0x65, 0xcd, 0xbb, 0x75, 0xe9, 0x16, 0x9e, 0xcd, 0x22, 0xeb, 0xe6, 0xe5, 0x46, 0x75],
            [0xa2, 0xe2, 0xfa, 0x9b, 0xaf, 0x7d, 0x20, 0x82, 0x2c, 0xa9, 0xf0, 0x54, 0x2f, 0x76, 0x4a, 0x41],
            [0xb6, 0x36, 0x4a, 0xc4, 0xe1, 0xde, 0x1e, 0x28, 0x5e, 0xaf, 0x14, 0x4a, 0x24, 0x15, 0xf7, 0xa0],
            [0x64, 0xcf, 0x9c, 0x7a, 0xbc, 0x50, 0xb8, 0x88, 0xaf, 0x65, 0xf4, 0x9d, 0x52, 0x19, 0x44, 0xb2],
            [0x47, 0xd6, 0x74, 0x2e, 0xef, 0xcc, 0x04, 0x65, 0xdc, 0x96, 0x35, 0x5e, 0x85, 0x1b, 0x64, 0xd9],
            [0x3e, 0xb3, 0x97, 0x90, 0x67, 0x8c, 0x56, 0xbe, 0xe3, 0x4b, 0xbc, 0xde, 0xcc, 0xf6, 0xcd, 0xb5],
            [0x64, 0x11, 0x0a, 0x92, 0x4f, 0x07, 0x43, 0xd5, 0x00, 0xcc, 0xad, 0xae, 0x72, 0xc1, 0x34, 0x27],
            [0x18, 0xd8, 0x12, 0x65, 0x16, 0xf8, 0xa1, 0x2a, 0xb1, 0xa3, 0x6d, 0x9f, 0x04, 0xd6, 0x8e, 0x51],
            [0xf5, 0x30, 0x35, 0x79, 0x68, 0x57, 0x84, 0x80, 0xb3, 0x98, 0xa3, 0xc2, 0x51, 0xcd, 0x10, 0x93],
            [0xda, 0x84, 0x36, 0x7f, 0x32, 0x5d, 0x42, 0xd6, 0x01, 0xb4, 0x32, 0x69, 0x64, 0x80, 0x2e, 0x8e],
            [0xe3, 0x7b, 0x1c, 0x6a, 0xa2, 0x84, 0x6f, 0x6f, 0xdb, 0x41, 0x3f, 0x23, 0x8b, 0x08, 0x9f, 0x23],
            // [0x6c, 0x00, 0x2b, 0x68, 0x24, 0x83, 0xe0, 0xca, 0xbb, 0xcc, 0x73, 0x1c, 0x25, 0x3b, 0xe5, 0x67],
            [0x14, 0x3a, 0xe8, 0xed, 0x65, 0x55, 0xab, 0xa9, 0x61, 0x10, 0xab, 0x58, 0x89, 0x3a, 0x8a, 0xe1],
            [0xb6, 0x94, 0x18, 0xa8, 0x53, 0x32, 0x24, 0x0d, 0xc8, 0x24, 0x92, 0x35, 0x39, 0x56, 0xae, 0x0c],
            [0x71, 0xb5, 0xc0, 0x8a, 0x19, 0x93, 0xe1, 0x36, 0x2e, 0x4d, 0x0c, 0xe9, 0xb2, 0x2b, 0x78, 0xd5],
            [0xe2, 0x34, 0xcd, 0xca, 0x26, 0x06, 0xb8, 0x1f, 0x29, 0x40, 0x8d, 0x5f, 0x6d, 0xa2, 0x12, 0x06],
            [0x13, 0x23, 0x7c, 0x49, 0x07, 0x4a, 0x3d, 0xa0, 0x78, 0xdc, 0x1d, 0x82, 0x8b, 0xb7, 0x8c, 0x6f],
            [0x30, 0x71, 0xa2, 0xa4, 0x8f, 0xe6, 0xcb, 0xd0, 0x4f, 0x1a, 0x12, 0x90, 0x98, 0xe3, 0x08, 0xf8],
            [0x90, 0xf4, 0x2e, 0xc0, 0xf6, 0x83, 0x85, 0xf2, 0xff, 0xc5, 0xdf, 0xc0, 0x3a, 0x65, 0x4d, 0xce],
            [0xfe, 0xbd, 0x9a, 0x24, 0xd8, 0xb6, 0x5c, 0x1c, 0x78, 0x7d, 0x50, 0xa4, 0xed, 0x36, 0x19, 0xa9]
        ];

        #[rustfmt::skip]
        let ciphertexts = [
            [0x6d, 0x25, 0x1e, 0x69, 0x44, 0xb0, 0x51, 0xe0, 0x4e, 0xaa, 0x6f, 0xb4, 0xdb, 0xf7, 0x84, 0x65],
            [0x6e, 0x29, 0x20, 0x11, 0x90, 0x15, 0x2d, 0xf4, 0xee, 0x05, 0x81, 0x39, 0xde, 0xf6, 0x10, 0xbb],
            [0xc3, 0xb4, 0x4b, 0x95, 0xd9, 0xd2, 0xf2, 0x56, 0x70, 0xee, 0xe9, 0xa0, 0xde, 0x09, 0x9f, 0xa3],
            [0x5d, 0x9b, 0x05, 0x57, 0x8f, 0xc9, 0x44, 0xb3, 0xcf, 0x1c, 0xcf, 0x0e, 0x74, 0x6c, 0xd5, 0x81],
            [0xf7, 0xef, 0xc8, 0x9d, 0x5d, 0xba, 0x57, 0x81, 0x04, 0x01, 0x6c, 0xe5, 0xad, 0x65, 0x9c, 0x05],
            [0x03, 0x06, 0x19, 0x4f, 0x66, 0x6d, 0x18, 0x36, 0x24, 0xaa, 0x23, 0x0a, 0x8b, 0x26, 0x4a, 0xe7],
            [0x85, 0x80, 0x75, 0xd5, 0x36, 0xd7, 0x9c, 0xce, 0xe5, 0x71, 0xf7, 0xd7, 0x20, 0x4b, 0x1f, 0x67],
            [0x35, 0x87, 0x0c, 0x6a, 0x57, 0xe9, 0xe9, 0x23, 0x14, 0xbc, 0xb8, 0x08, 0x7c, 0xde, 0x72, 0xce],
            [0x6c, 0x68, 0xe9, 0xbe, 0x5e, 0xc4, 0x1e, 0x22, 0xc8, 0x25, 0xb7, 0xc7, 0xaf, 0xfb, 0x43, 0x63],
            [0xf5, 0xdf, 0x39, 0x99, 0x0f, 0xc6, 0x88, 0xf1, 0xb0, 0x72, 0x24, 0xcc, 0x03, 0xe8, 0x6c, 0xea],
            [0xbb, 0xa0, 0x71, 0xbc, 0xb4, 0x70, 0xf8, 0xf6, 0x58, 0x6e, 0x5d, 0x3a, 0xdd, 0x18, 0xbc, 0x66],
            [0x43, 0xc9, 0xf7, 0xe6, 0x2f, 0x5d, 0x28, 0x8b, 0xb2, 0x7a, 0xa4, 0x0e, 0xf8, 0xfe, 0x1e, 0xa8],
            // [0x35, 0x80, 0xd1, 0x9c, 0xff, 0x44, 0xf1, 0x01, 0x4a, 0x7c, 0x96, 0x6a, 0x69, 0x05, 0x9d, 0xe5],
            [0x80, 0x6d, 0xa8, 0x64, 0xdd, 0x29, 0xd4, 0x8d, 0xea, 0xfb, 0xe7, 0x64, 0xf8, 0x20, 0x2a, 0xef],
            [0xa3, 0x03, 0xd9, 0x40, 0xde, 0xd8, 0xf0, 0xba, 0xff, 0x6f, 0x75, 0x41, 0x4c, 0xac, 0x52, 0x43],
            [0xc2, 0xda, 0xbd, 0x11, 0x7f, 0x8a, 0x3e, 0xca, 0xbf, 0xbb, 0x11, 0xd1, 0x21, 0x94, 0xd9, 0xd0],
            [0xff, 0xf6, 0x0a, 0x47, 0x40, 0x08, 0x6b, 0x3b, 0x9c, 0x56, 0x19, 0x5b, 0x98, 0xd9, 0x1a, 0x7b],
            [0x81, 0x46, 0xa0, 0x8e, 0x23, 0x57, 0xf0, 0xca, 0xa3, 0x0c, 0xa8, 0xc9, 0x4d, 0x1a, 0x05, 0x44],
            [0x4b, 0x98, 0xe0, 0x6d, 0x35, 0x6d, 0xeb, 0x07, 0xeb, 0xb8, 0x24, 0xe5, 0x71, 0x3f, 0x7b, 0xe3],
            [0x7a, 0x20, 0xa5, 0x3d, 0x46, 0x0f, 0xc9, 0xce, 0x04, 0x23, 0xa7, 0xa0, 0x76, 0x4c, 0x6c, 0xf2],
            [0xf4, 0xa7, 0x0d, 0x8a, 0xf8, 0x77, 0xf9, 0xb0, 0x2b, 0x4c, 0x40, 0xdf, 0x57, 0xd4, 0x5b, 0x17]
        ];

        for i in 0..keys.len() {
            let aes = Aes::new(keys[i].to_vec());

            let plaintext = [0u8; 16];
            let plaintext_block = GenericArray::clone_from_slice(&plaintext);
            let encrypted_block = aes.encrypt_block(plaintext_block);
            assert_eq!(encrypted_block.as_slice(), ciphertexts[i]);
        }
    }

    #[test]
    fn test_key_sbox_appendix_c_two() {
        #[rustfmt::skip]
        let keys = [
           [0xe9,0xf0, 0x65, 0xd7, 0xc1, 0x35, 0x73, 0x58, 0x7f, 0x78, 0x75, 0x35, 0x7d, 0xfb, 0xb1, 0x6c, 0x53, 0x48, 0x9f, 0x6a, 0x4b, 0xd0, 0xf7, 0xcd],
           [0x15, 0xd2, 0x0f, 0x6e, 0xbc, 0x7e, 0x64, 0x9f, 0xd9, 0x5b, 0x76, 0xb1, 0x07, 0xe6, 0xda, 0xba, 0x96, 0x7c, 0x8a, 0x94, 0x84, 0x79, 0x7f, 0x29],
           [0xa8, 0xa2, 0x82, 0xee, 0x31, 0xc0, 0x3f, 0xae, 0x4f, 0x8e, 0x9b, 0x89, 0x30, 0xd5, 0x47, 0x3c, 0x2e, 0xd6, 0x95, 0xa3, 0x47, 0xe8, 0x8b, 0x7c], 
           [0xcd, 0x62, 0x37, 0x6d, 0x5e, 0xbb, 0x41, 0x49, 0x17, 0xf0, 0xc7, 0x8f, 0x05, 0x26, 0x64, 0x33, 0xdc, 0x91, 0x92, 0xa1, 0xec, 0x94, 0x33, 0x00],
           [0x50, 0x2a, 0x6a, 0xb3, 0x69, 0x84, 0xaf, 0x26, 0x8b, 0xf4, 0x23, 0xc7, 0xf5, 0x09, 0x20, 0x52, 0x07, 0xfc, 0x15, 0x52, 0xaf, 0x4a, 0x91, 0xe5],
           [0x25, 0xa3, 0x9d, 0xbf, 0xd8, 0x03, 0x4f, 0x71, 0xa8, 0x1f, 0x9c, 0xeb, 0x55, 0x02, 0x6e, 0x40, 0x37, 0xf8, 0xf6, 0xaa, 0x30, 0xab, 0x44, 0xce],
           [0xe0, 0x8c, 0x15, 0x41, 0x17, 0x74, 0xec, 0x4a, 0x90, 0x8b, 0x64, 0xea, 0xdc, 0x6a, 0xc4, 0x19, 0x9c, 0x7c, 0xd4, 0x53, 0xf3, 0xaa, 0xef, 0x53],
            [0x3b, 0x37, 0x5a, 0x1f, 0xf7, 0xe8, 0xd4, 0x44, 0x09, 0x69, 0x6e, 0x63, 0x26, 0xec, 0x9d, 0xec, 0x86, 0x13, 0x8e, 0x2a, 0xe0, 0x10, 0xb9, 0x80],
            [0x95, 0x0b, 0xb9, 0xf2, 0x2c, 0xc3, 0x5b, 0xe6, 0xfe, 0x79, 0xf5, 0x2c, 0x32, 0x0a, 0xf9, 0x3d, 0xec, 0x5b, 0xc9, 0xc0, 0xc2, 0xf9, 0xcd, 0x53],
            [0x70, 0x01, 0xc4, 0x87, 0xcc, 0x3e, 0x57, 0x2c, 0xfc, 0x92, 0xf4, 0xd0, 0xe6, 0x97, 0xd9, 0x82, 0xe8, 0x85, 0x6f, 0xdc, 0xc9, 0x57, 0xda, 0x40],
            [0xf0, 0x29, 0xce, 0x61, 0xd4, 0xe5, 0xa4, 0x05, 0xb4, 0x1e, 0xad, 0x0a, 0x88, 0x3c, 0xc6, 0xa7, 0x37, 0xda, 0x2c, 0xf5, 0x0a, 0x6c, 0x92, 0xae],
            [0x61, 0x25, 0x71, 0x34, 0xa5, 0x18, 0xa0, 0xd5, 0x7d, 0x9d, 0x24, 0x4d, 0x45, 0xf6, 0x49, 0x8c, 0xbc, 0x32, 0xf2, 0xba, 0xfc, 0x52, 0x2d, 0x79],
            [0xb0, 0xab, 0x0a, 0x6a, 0x81, 0x8b, 0xae, 0xf2, 0xd1, 0x1f, 0xa3, 0x3e, 0xac, 0x94, 0x72, 0x84, 0xfb, 0x7d, 0x74, 0x8c, 0xfb, 0x75, 0xe5, 0x70],
            [0xee, 0x05, 0x3a, 0xa0, 0x11, 0xc8, 0xb4, 0x28, 0xcd, 0xcc, 0x36, 0x36, 0x31, 0x3c, 0x54, 0xd6, 0xa0, 0x3c, 0xac, 0x01, 0xc7, 0x15, 0x79, 0xd6],
            [0xd2, 0x92, 0x65, 0x27, 0xe0, 0xaa, 0x9f, 0x37, 0xb4, 0x5e, 0x2e, 0xc2, 0xad, 0xe5, 0x85, 0x3e, 0xf8, 0x07, 0x57, 0x61, 0x04, 0xc7, 0xac, 0xe3],
            [0x98, 0x22, 0x15, 0xf4, 0xe1, 0x73, 0xdf, 0xa0, 0xfc, 0xff, 0xe5, 0xd3, 0xda, 0x41, 0xc4, 0x81, 0x2c, 0x7b, 0xcc, 0x8e, 0xd3, 0x54, 0x0f, 0x93],
            [0x98, 0xc6, 0xb8, 0xe0, 0x1e, 0x37, 0x9f, 0xbd, 0x14, 0xe6, 0x1a, 0xf6, 0xaf, 0x89, 0x15, 0x96, 0x58, 0x35, 0x65, 0xf2, 0xa2, 0x7d, 0x59, 0xe9],
            [0xb3, 0xad, 0x5c, 0xea, 0x1d, 0xdd, 0xc2, 0x14, 0xca, 0x96, 0x9a, 0xc3, 0x5f, 0x37, 0xda, 0xe1, 0xa9, 0xa9, 0xd1, 0x52, 0x8f, 0x89, 0xbb, 0x35],
            [0x45, 0x89, 0x93, 0x67, 0xc3, 0x13, 0x28, 0x49, 0x76, 0x30, 0x73, 0xc4, 0x35, 0xa9, 0x28, 0x8a, 0x76, 0x6c, 0x8b, 0x9e, 0xc2, 0x30, 0x85, 0x16],
            [0xec, 0x25, 0x0e, 0x04, 0xc3, 0x90, 0x3f, 0x60, 0x26, 0x47, 0xb8, 0x5a, 0x40, 0x1a, 0x1a, 0xe7, 0xca, 0x2f, 0x02, 0xf6, 0x7f, 0xa4, 0x25, 0x3e],
            [0xd0, 0x77, 0xa0, 0x3b, 0xd8, 0xa3, 0x89, 0x73, 0x92, 0x8c, 0xca, 0xfe, 0x4a, 0x9d, 0x2f, 0x45, 0x51, 0x30, 0xbd, 0x0a, 0xf5, 0xae, 0x46, 0xa9],
            [0xd1, 0x84, 0xc3, 0x6c, 0xf0, 0xdd, 0xdf, 0xec, 0x39, 0xe6, 0x54, 0x19, 0x50, 0x06, 0x02, 0x22, 0x37, 0x87, 0x1a, 0x47, 0xc3, 0x3d, 0x31, 0x98],
            [0x4c, 0x69, 0x94, 0xff, 0xa9, 0xdc, 0xdc, 0x80, 0x5b, 0x60, 0xc2, 0xc0, 0x09, 0x53, 0x34, 0xc4, 0x2d, 0x95, 0xa8, 0xfc, 0x0c, 0xa5, 0xb0, 0x80],
            [0xc8, 0x8f, 0x5b, 0x00, 0xa4, 0xef, 0x9a, 0x68, 0x40, 0xe2, 0xac, 0xaf, 0x33, 0xf0, 0x0a, 0x3b, 0xdc, 0x4e, 0x25, 0x89, 0x53, 0x03, 0xfa, 0x72],
        ];

        #[rustfmt::skip]
        let ciphertexts = [
            [0x09, 0x56, 0x25, 0x9c, 0x9c, 0xd5, 0xcf, 0xd0, 0x18, 0x1c, 0xca, 0x53, 0x38, 0x0c, 0xde, 0x06],
            [0x8e, 0x4e, 0x18, 0x42, 0x4e, 0x59, 0x1a, 0x3d, 0x5b, 0x6f, 0x08, 0x76, 0xf1, 0x6f, 0x85, 0x94],
            [0x93, 0xf3, 0x27, 0x0c, 0xfc, 0x87, 0x7e, 0xf1, 0x7e, 0x10, 0x6c, 0xe9, 0x38, 0x97, 0x9c, 0xb0],
            [0x7f, 0x6c, 0x25, 0xff, 0x41, 0x85, 0x85, 0x61, 0xbb, 0x62, 0xf3, 0x64, 0x92, 0xe9, 0x3c, 0x29],
            [0x8e, 0x06, 0x55, 0x6d, 0xcb, 0xb0, 0x0b, 0x80, 0x9a, 0x02, 0x50, 0x47, 0xcf, 0xf2, 0xa9, 0x40],
            [0x36, 0x08, 0xc3, 0x44, 0x86, 0x8e, 0x94, 0x55, 0x5d, 0x23, 0xa1, 0x20, 0xf8, 0xa5, 0x50, 0x2d],
            [0x77, 0xda, 0x20, 0x21, 0x93, 0x5b, 0x84, 0x0b, 0x7f, 0x5d, 0xcc, 0x39, 0x13, 0x2d, 0xa9, 0xe5],
            [0x3b, 0x7c, 0x24, 0xf8, 0x25, 0xe3, 0xbf, 0x98, 0x73, 0xc9, 0xf1, 0x4d, 0x39, 0xa0, 0xe6, 0xf4],
            [0x64, 0xeb, 0xf9, 0x56, 0x86, 0xb3, 0x53, 0x50, 0x8c, 0x90, 0xec, 0xd8, 0xb6, 0x13, 0x43, 0x16],
            [0xff, 0x55, 0x8c, 0x5d, 0x27, 0x21, 0x0b, 0x79, 0x29, 0xb7, 0x3f, 0xc7, 0x08, 0xeb, 0x4c, 0xf1],
            [0xa2, 0xc3, 0xb2, 0xa8, 0x18, 0x07, 0x54, 0x90, 0xa7, 0xb4, 0xc1, 0x43, 0x80, 0xf0, 0x27, 0x02],
            [0xcf, 0xe4, 0xd7, 0x40, 0x02, 0x69, 0x6c, 0xcf, 0x7d, 0x87, 0xb1, 0x4a, 0x2f, 0x9c, 0xaf, 0xc9],
            [0xd2, 0xea, 0xfd, 0x86, 0xf6, 0x3b, 0x10, 0x9b, 0x91, 0xf5, 0xdb, 0xb3, 0xa3, 0xfb, 0x7e, 0x13],
            [0x9b, 0x9f, 0xdd, 0x1c, 0x59, 0x75, 0x65, 0x5f, 0x53, 0x99, 0x98, 0xb3, 0x06, 0xa3, 0x24, 0xaf],
            [0xdd, 0x61, 0x9e, 0x1c, 0xf2, 0x04, 0x44, 0x61, 0x12, 0xe0, 0xaf, 0x2b, 0x9a, 0xfa, 0x8f, 0x8c],
            [0xd4, 0xf0, 0xaa, 0xe1, 0x3c, 0x8f, 0xe9, 0x33, 0x9f, 0xbf, 0x9e, 0x69, 0xed, 0x0a, 0xd7, 0x4d],
            [0x19, 0xc8, 0x0e, 0xc4, 0xa6, 0xde, 0xb7, 0xe5, 0xed, 0x10, 0x33, 0xdd, 0xa9, 0x33, 0x49, 0x8f],
            [0x3c, 0xf5, 0xe1, 0xd2, 0x1a, 0x17, 0x95, 0x6d, 0x1d, 0xff, 0xad, 0x6a, 0x7c, 0x41, 0xc6, 0x59],
            [0x69, 0xfd, 0x12, 0xe8, 0x50, 0x5f, 0x8d, 0xed, 0x2f, 0xdc, 0xb1, 0x97, 0xa1, 0x21, 0xb3, 0x62],
            [0x8a, 0xa5, 0x84, 0xe2, 0xcc, 0x4d, 0x17, 0x41, 0x7a, 0x97, 0xcb, 0x9a, 0x28, 0xba, 0x29, 0xc8],
            [0xab, 0xc7, 0x86, 0xfb, 0x1e, 0xdb, 0x50, 0x45, 0x80, 0xc4, 0xd8, 0x82, 0xef, 0x29, 0xa0, 0xc7],
            [0x2e, 0x19, 0xfb, 0x60, 0xa3, 0xe1, 0xde, 0x01, 0x66, 0xf4, 0x83, 0xc9, 0x78, 0x24, 0xa9, 0x78],
            [0x76, 0x56, 0x70, 0x95, 0x38, 0xdd, 0x5f, 0xec, 0x41, 0xe0, 0xce, 0x6a, 0x0f, 0x8e, 0x20, 0x7d],
            [0xa6, 0x7c, 0xf3, 0x33, 0xb3, 0x14, 0xd4, 0x11, 0xd3, 0xc0, 0xae, 0x6e, 0x1c, 0xfc, 0xd8, 0xf5]
        ];

        for i in 0..keys.len() {
            let aes = Aes::new(keys[i].to_vec());

            let plaintext = [0u8; 16];
            let plaintext_block = GenericArray::clone_from_slice(&plaintext);
            let encrypted_block = aes.encrypt_block(plaintext_block);
            assert_eq!(encrypted_block.as_slice(), ciphertexts[i]);
        }
    }

    #[test]
    fn test_key_sbox_appendix_c_three() {
        #[rustfmt::skip]
        let keys = [
            [0xc4, 0x7b, 0x02, 0x94, 0xdb, 0xbb, 0xee, 0x0f, 0xec, 0x47, 0x57, 0xf2, 0x2f, 0xfe, 0xee, 0x35, 0x87, 0xca, 0x47, 0x30, 0xc3, 0xd3, 0x3b, 0x69, 0x1d, 0xf3, 0x8b, 0xab, 0x07, 0x6b, 0xc5, 0x58],
            [0x28, 0xd4, 0x6c, 0xff, 0xa1, 0x58, 0x53, 0x31, 0x94, 0x21, 0x4a, 0x91, 0xe7, 0x12, 0xfc, 0x2b, 0x45, 0xb5, 0x18, 0x07, 0x66, 0x75, 0xaf, 0xfd, 0x91, 0x0e, 0xde, 0xca, 0x5f, 0x41, 0xac, 0x64],
            [0xc1, 0xcc, 0x35, 0x8b, 0x44, 0x99, 0x09, 0xa1, 0x94, 0x36, 0xcf, 0xbb, 0x3f, 0x85, 0x2e, 0xf8, 0xbc, 0xb5, 0xed, 0x12, 0xac, 0x70, 0x58, 0x32, 0x5f, 0x56, 0xe6, 0x09, 0x9a, 0xab, 0x1a, 0x1c],
            [0x98, 0x4c, 0xa7, 0x5f, 0x4e, 0xe8, 0xd7, 0x06, 0xf4, 0x6c, 0x2d, 0x98, 0xc0, 0xbf, 0x4a, 0x45, 0xf5, 0xb0, 0x0d, 0x79, 0x1c, 0x2d, 0xfe, 0xb1, 0x91, 0xb5, 0xed, 0x8e, 0x42, 0x0f, 0xd6, 0x27],
            [0xb4, 0x3d, 0x08, 0xa4, 0x47, 0xac, 0x86, 0x09, 0xba, 0xad, 0xae, 0x4f, 0xf1, 0x29, 0x18, 0xb9, 0xf6, 0x8f, 0xc1, 0x65, 0x3f, 0x12, 0x69, 0x22, 0x2f, 0x12, 0x39, 0x81, 0xde, 0xd7, 0xa9, 0x2f],
            [0x1d, 0x85, 0xa1, 0x81, 0xb5, 0x4c, 0xde, 0x51, 0xf0, 0xe0, 0x98, 0x09, 0x5b, 0x29, 0x62, 0xfd, 0xc9, 0x3b, 0x51, 0xfe, 0x9b, 0x88, 0x60, 0x2b, 0x3f, 0x54, 0x13, 0x0b, 0xf7, 0x6a, 0x5b, 0xd9],
            [0xdc, 0x0e, 0xba, 0x1f, 0x22, 0x32, 0xa7, 0x87, 0x9d, 0xed, 0x34, 0xed, 0x84, 0x28, 0xee, 0xb8, 0x76, 0x9b, 0x05, 0x6b, 0xba, 0xf8, 0xad, 0x77, 0xcb, 0x65, 0xc3, 0x54, 0x14, 0x30, 0xb4, 0xcf],
            [0xf8, 0xbe, 0x9b, 0xa6, 0x15, 0xc5, 0xa9, 0x52, 0xca, 0xbb, 0xca, 0x24, 0xf6, 0x8f, 0x85, 0x93, 0x03, 0x96, 0x24, 0xd5, 0x24, 0xc8, 0x16, 0xac, 0xda, 0x2c, 0x91, 0x83, 0xbd, 0x91, 0x7c, 0xb9],
            [0x79, 0x7f, 0x8b, 0x3d, 0x17, 0x6d, 0xac, 0x5b, 0x7e, 0x34, 0xa2, 0xd5, 0x39, 0xc4, 0xef, 0x36, 0x7a, 0x16, 0xf8, 0x63, 0x5f, 0x62, 0x64, 0x73, 0x75, 0x91, 0xc5, 0xc0, 0x7b, 0xf5, 0x7a, 0x3e],
            [0x68, 0x38, 0xd4, 0x0c, 0xaf, 0x92, 0x77, 0x49, 0xc1, 0x3f, 0x03, 0x29, 0xd3, 0x31, 0xf4, 0x48, 0xe2, 0x02, 0xc7, 0x3e, 0xf5, 0x2c, 0x5f, 0x73, 0xa3, 0x7c, 0xa6, 0x35, 0xd4, 0xc4, 0x77, 0x07],
            [0xcc, 0xd1, 0xbc, 0x3c, 0x65, 0x9c, 0xd3, 0xc5, 0x9b, 0xc4, 0x37, 0x48, 0x4e, 0x3c, 0x5c, 0x72, 0x44, 0x41, 0xda, 0x8d, 0x6e, 0x90, 0xce, 0x55, 0x6c, 0xd5, 0x7d, 0x07, 0x52, 0x66, 0x3b, 0xbc],
            [0x13, 0x42, 0x8b, 0x5e, 0x4c, 0x00, 0x5e, 0x06, 0x36, 0xdd, 0x33, 0x84, 0x05, 0xd1, 0x73, 0xab, 0x13, 0x5d, 0xec, 0x2a, 0x25, 0xc2, 0x2c, 0x5d, 0xf0, 0x72, 0x2d, 0x69, 0xdc, 0xc4, 0x38, 0x87],
            [0x07, 0xeb, 0x03, 0xa0, 0x8d, 0x29, 0x1d, 0x1b, 0x07, 0x40, 0x8b, 0xf3, 0x51, 0x2a, 0xb4, 0x0c, 0x91, 0x09, 0x7a, 0xc7, 0x74, 0x61, 0xaa, 0xd4, 0xbb, 0x85, 0x96, 0x47, 0xf7, 0x4f, 0x00, 0xee],
            [0x90, 0x14, 0x3a, 0xe2, 0x0c, 0xd7, 0x8c, 0x5d, 0x8e, 0xbd, 0xd6, 0xcb, 0x9d, 0xc1, 0x76, 0x24, 0x27, 0xa9, 0x6c, 0x78, 0xc6, 0x39, 0xbc, 0xcc, 0x41, 0xa6, 0x14, 0x24, 0x56, 0x4e, 0xaf, 0xe1],
            [0xb7, 0xa5, 0x79, 0x4d, 0x52, 0x73, 0x74, 0x75, 0xd5, 0x3d, 0x5a, 0x37, 0x72, 0x00, 0x84, 0x9b, 0xe0, 0x26, 0x0a, 0x67, 0xa2, 0xb2, 0x2c, 0xed, 0x8b, 0xbe, 0xf1, 0x28, 0x82, 0x27, 0x0d, 0x07],
            [0xfc, 0xa0, 0x2f, 0x3d, 0x50, 0x11, 0xcf, 0xc5, 0xc1, 0xe2, 0x31, 0x65, 0xd4, 0x13, 0xa0, 0x49, 0xd4, 0x52, 0x6a, 0x99, 0x18, 0x27, 0x42, 0x4d, 0x89, 0x6f, 0xe3, 0x43, 0x5e, 0x0b, 0xf6, 0x8e],
        ];

        #[rustfmt::skip]
        let ciphertexts = [
            [0x46, 0xf2, 0xfb, 0x34, 0x2d, 0x6f, 0x0a, 0xb4, 0x77, 0x47, 0x6f, 0xc5, 0x01, 0x24, 0x2c, 0x5f],
            [0x4b, 0xf3, 0xb0, 0xa6, 0x9a, 0xeb, 0x66, 0x57, 0x79, 0x4f, 0x29, 0x01, 0xb1, 0x44, 0x0a, 0xd4],
            [0x35, 0x20, 0x65, 0x27, 0x21, 0x69, 0xab, 0xf9, 0x85, 0x68, 0x43, 0x92, 0x7d, 0x06, 0x74, 0xfd],
            [0x43, 0x07, 0x45, 0x6a, 0x9e, 0x67, 0x81, 0x3b, 0x45, 0x2e, 0x15, 0xfa, 0x8f, 0xff, 0xe3, 0x98],
            [0x46, 0x63, 0x44, 0x66, 0x07, 0x35, 0x49, 0x89, 0x47, 0x7a, 0x5c, 0x6f, 0x0f, 0x00, 0x7e, 0xf4],
            [0x53, 0x1c, 0x2c, 0x38, 0x34, 0x45, 0x78, 0xb8, 0x4d, 0x50, 0xb3, 0xc9, 0x17, 0xbb, 0xb6, 0xe1],
            [0xfc, 0x6a, 0xec, 0x90, 0x63, 0x23, 0x48, 0x00, 0x05, 0xc5, 0x8e, 0x7e, 0x1a, 0xb0, 0x04, 0xad],
            [0xa3, 0x94, 0x4b, 0x95, 0xca, 0x0b, 0x52, 0x04, 0x35, 0x84, 0xef, 0x02, 0x15, 0x19, 0x26, 0xa8],
            [0xa7, 0x42, 0x89, 0xfe, 0x73, 0xa4, 0xc1, 0x23, 0xca, 0x18, 0x9e, 0xa1, 0xe1, 0xb4, 0x9a, 0xd5],
            [0xb9, 0x1d, 0x4e, 0xa4, 0x48, 0x86, 0x44, 0xb5, 0x6c, 0xf0, 0x81, 0x2f, 0xa7, 0xfc, 0xf5, 0xfc],
            [0x30, 0x4f, 0x81, 0xab, 0x61, 0xa8, 0x0c, 0x2e, 0x74, 0x3b, 0x94, 0xd5, 0x00, 0x2a, 0x12, 0x6b],
            [0x64, 0x9a, 0x71, 0x54, 0x53, 0x78, 0xc7, 0x83, 0xe3, 0x68, 0xc9, 0xad, 0xe7, 0x11, 0x4f, 0x6c],
            [0x47, 0xcb, 0x03, 0x0d, 0xa2, 0xab, 0x05, 0x1d, 0xfc, 0x6c, 0x4b, 0xf6, 0x91, 0x0d, 0x12, 0xbb],
            [0x79, 0x8c, 0x7c, 0x00, 0x5d, 0xee, 0x43, 0x2b, 0x2c, 0x8e, 0xa5, 0xdf, 0xa3, 0x81, 0xec, 0xc3],
            [0x63, 0x7c, 0x31, 0xdc, 0x25, 0x91, 0xa0, 0x76, 0x36, 0xf6, 0x46, 0xb7, 0x2d, 0xaa, 0xbb, 0xe7],
            [0x17, 0x9a, 0x49, 0xc7, 0x12, 0x15, 0x4b, 0xbf, 0xfb, 0xe6, 0xe7, 0xa8, 0x4a, 0x18, 0xe2, 0x20],
        ];

        for i in 0..keys.len() {
            let aes = Aes::new(keys[i].to_vec());

            let plaintext = [0u8; 16];
            let plaintext_block = GenericArray::clone_from_slice(&plaintext);
            let encrypted_block = aes.encrypt_block(plaintext_block);
            assert_eq!(encrypted_block.as_slice(), ciphertexts[i]);
        }
    }

    #[test]
    fn test_sub_bytes() {
        let aes = Aes {
            key: Vec::new(),
            key_length: KeyLength::Length128,
        };

        let plaintext = *b"The quick brown ";
        let plaintext_block = GenericArray::clone_from_slice(&plaintext);

        let actual_output = aes.sub_bytes(plaintext_block);
        #[rustfmt::skip]
        let expected_output: [u8; 16] = [
            0x20, 0x45, 0x4d, 0xb7,
            0xa3, 0x9d, 0xf9, 0xfb,
            0x7f, 0xb7, 0xaa, 0x40,
            0xa8, 0xf5, 0x9f, 0xb7,
        ];

        assert_eq!(actual_output.as_slice(), expected_output);
    }

    #[test]
    fn test_gf_sbox_appendix_b_one() {
        let key = [0u8; 16]; // aes-128
        let aes = Aes::new(key.to_vec());

        #[rustfmt::skip]
        let plaintexts = [
            [
                0xf3, 0x44, 0x81, 0xec,
                0x3c, 0xc6, 0x27, 0xba,
                0xcd, 0x5d, 0xc3, 0xfb,
                0x08, 0xf2, 0x73, 0xe6
            ],
            [
                0x97, 0x98, 0xc4, 0x64,
                0x0b, 0xad, 0x75, 0xc7,
                0xc3, 0x22, 0x7d, 0xb9,
                0x10, 0x17, 0x4e, 0x72,
            ],
            [
                0x96, 0xab, 0x5c, 0x2f,
                0xf6, 0x12, 0xd9, 0xdf,
                0xaa, 0xe8, 0xc3, 0x1f,
                0x30, 0xc4, 0x21, 0x68,
            ],
            [
                0x6a, 0x11, 0x8a, 0x87,
                0x45, 0x19, 0xe6, 0x4e,
                0x99, 0x63, 0x79, 0x8a,
                0x50, 0x3f, 0x1d, 0x35,
            ],
            [
                0xcb, 0x9f, 0xce, 0xec,
                0x81, 0x28, 0x6c, 0xa3,
                0xe9, 0x89, 0xbd, 0x97,
                0x9b, 0x0c, 0xb2, 0x84,
            ],
            [
                0xb2, 0x6a, 0xeb, 0x18,
                0x74, 0xe4, 0x7c, 0xa8,
                0x35, 0x8f, 0xf2, 0x23,
                0x78, 0xf0, 0x91, 0x44,
            ],
            [
                0x58, 0xc8, 0xe0, 0x0b,
                0x26, 0x31, 0x68, 0x6d,
                0x54, 0xea, 0xb8, 0x4b,
                0x91, 0xf0, 0xac, 0xa1,
            
            ]
        ];

        #[rustfmt::skip]
        let ciphertexts = [
            [
                0x03, 0x36, 0x76, 0x3e,
                0x96, 0x6d, 0x92, 0x59,
                0x5a, 0x56, 0x7c, 0xc9,
                0xce, 0x53, 0x7f, 0x5e,
            ],
            [
                0xa9, 0xa1, 0x63, 0x1b,
                0xf4, 0x99, 0x69, 0x54,
                0xeb, 0xc0, 0x93, 0x95,
                0x7b, 0x23, 0x45, 0x89,
            ],
            [
                0xff, 0x4f, 0x83, 0x91,
                0xa6, 0xa4, 0x0c, 0xa5,
                0xb2, 0x5d, 0x23, 0xbe,
                0xdd, 0x44, 0xa5, 0x97,
            ],
            [
                0xdc, 0x43, 0xbe, 0x40,
                0xbe, 0x0e, 0x53, 0x71,
                0x2f, 0x7e, 0x2b, 0xf5,
                0xca, 0x70, 0x72, 0x09,
            ],
            [
                0x92, 0xbe, 0xed, 0xab,
                0x18, 0x95, 0xa9, 0x4f,
                0xaa, 0x69, 0xb6, 0x32,
                0xe5, 0xcc, 0x47, 0xce,
            ],
            [
                0x45, 0x92, 0x64, 0xf4,
                0x79, 0x8f, 0x6a, 0x78,
                0xba, 0xcb, 0x89, 0xc1,
                0x5e, 0xd3, 0xd6, 0x01,
            ],
            [
                0x08, 0xa4, 0xe2, 0xef,
                0xec, 0x8a, 0x8e, 0x33,
                0x12, 0xca, 0x74, 0x60,
                0xb9, 0x04, 0x0b, 0xbf,
            ]
        ];

        for i in 0..plaintexts.len() {
            let plaintext_block = GenericArray::clone_from_slice(&plaintexts[i]);
            let encrypted_block = aes.encrypt_block(plaintext_block);
            assert_eq!(encrypted_block.as_slice(), ciphertexts[i]);
        }
    }

    #[test]
    fn test_gf_sbox_appendix_b_two() {
        let key = [0u8; 24]; // aes-192
        let aes = Aes::new(key.to_vec());

        #[rustfmt::skip]
        let plaintexts = [
            [
                0x1b, 0x07, 0x7a, 0x6a,
                0xf4, 0xb7, 0xf9, 0x82,
                0x29, 0xde, 0x78, 0x6d,
                0x75, 0x16, 0xb6, 0x39,
            ],
            [
                0x9c, 0x2d, 0x88, 0x42,
                0xe5, 0xf4, 0x8f, 0x57,
                0x64, 0x82, 0x05, 0xd3,
                0x9a, 0x23, 0x9a, 0xf1,
            ],
            [
                0xbf, 0xf5, 0x25, 0x10,
                0x09, 0x5f, 0x51, 0x8e,
                0xcc, 0xa6, 0x0a, 0xf4,
                0x20, 0x54, 0x44, 0xbb,
            ],
            [
                0x51, 0x71, 0x97, 0x83,
                0xd3, 0x18, 0x5a, 0x53,
                0x5b, 0xd7, 0x5a, 0xdc,
                0x65, 0x07, 0x1c, 0xe1,
            ],
            [
                0x26, 0xaa, 0x49, 0xdc,
                0xfe, 0x76, 0x29, 0xa8,
                0x90, 0x1a, 0x69, 0xa9,
                0x91, 0x4e, 0x6d, 0xfd,
            ],
            [
                0x94, 0x1a, 0x47, 0x73,
                0x05, 0x82, 0x24, 0xe1,
                0xef, 0x66, 0xd1, 0x0e,
                0x0a, 0x6e, 0xe7, 0x82,
            ],
        ];

        #[rustfmt::skip]
        let ciphertexts = [
            [
                0x27, 0x5c, 0xfc, 0x04,
                0x13, 0xd8, 0xcc, 0xb7,
                0x05, 0x13, 0xc3, 0x85,
                0x9b, 0x1d, 0x0f, 0x72,
            ],
            [
                0xc9, 0xb8, 0x13, 0x5f,
                0xf1, 0xb5, 0xad, 0xc4,
                0x13, 0xdf, 0xd0, 0x53,
                0xb2, 0x1b, 0xd9, 0x6d,
            ],
            [
                0x4a, 0x36, 0x50, 0xc3,
                0x37, 0x1c, 0xe2, 0xeb,
                0x35, 0xe3, 0x89, 0xa1,
                0x71, 0x42, 0x74, 0x40,
            ],
            [
                0x4f, 0x35, 0x45, 0x92,
                0xff, 0x7c, 0x88, 0x47,
                0xd2, 0xd0, 0x87, 0x0c,
                0xa9, 0x48, 0x1b, 0x7c,
            ],
            [
                0xd5, 0xe0, 0x8b, 0xf9,
                0xa1, 0x82, 0xe8, 0x57,
                0xcf, 0x40, 0xb3, 0xa3,
                0x6e, 0xe2, 0x48, 0xcc,
            ],
            [
                0x06, 0x7c, 0xd9, 0xd3,
                0x74, 0x92, 0x07, 0x79,
                0x18, 0x41, 0x56, 0x25,
                0x07, 0xfa, 0x96, 0x26,
            ],
        ];

        for i in 0..plaintexts.len() {
            let plaintext_block = GenericArray::clone_from_slice(&plaintexts[i]);
            let encrypted_block = aes.encrypt_block(plaintext_block);
            assert_eq!(encrypted_block.as_slice(), ciphertexts[i]);
        }
    }

    #[test]
    fn test_gf_sbox_appendix_b_three() {
        let key = [0u8; 32]; // aes-256
        let aes = Aes::new(key.to_vec());

        #[rustfmt::skip]
        let plaintexts = [
            [
                0x01, 0x47, 0x30, 0xf8,
                0x0a, 0xc6, 0x25, 0xfe,
                0x84, 0xf0, 0x26, 0xc6,
                0x0b, 0xfd, 0x54, 0x7d,
            ],
            [
                0x0b, 0x24, 0xaf, 0x36,
                0x19, 0x3c, 0xe4, 0x66,
                0x5f, 0x28, 0x25, 0xd7,
                0xb4, 0x74, 0x9c, 0x98,
            ],
            [
                0x76, 0x1c, 0x1f, 0xe4,
                0x1a, 0x18, 0xac, 0xf2,
                0x0d, 0x24, 0x16, 0x50,
                0x61, 0x1d, 0x90, 0xf1,
            ],
            [
                0x8a, 0x56, 0x07, 0x69,
                0xd6, 0x05, 0x86, 0x8a,
                0xd8, 0x0d, 0x81, 0x9b,
                0xdb, 0xa0, 0x37, 0x71,
            ],
            [
                0x91, 0xfb, 0xef, 0x2d,
                0x15, 0xa9, 0x78, 0x16,
                0x06, 0x0b, 0xee, 0x1f,
                0xea, 0xa4, 0x9a, 0xfe,
            ],
        ];

        #[rustfmt::skip]
        let ciphertexts = [
            [
                0x5c, 0x9d, 0x84, 0x4e,
                0xd4, 0x6f, 0x98, 0x85,
                0x08, 0x5e, 0x5d, 0x6a,
                0x4f, 0x94, 0xc7, 0xd7,
            ],
            [
                0xa9, 0xff, 0x75, 0xbd,
                0x7c, 0xf6, 0x61, 0x3d,
                0x37, 0x31, 0xc7, 0x7c,
                0x3b, 0x6d, 0x0c, 0x04,
            ],
            [
                0x62, 0x3a, 0x52, 0xfc,
                0xea, 0x5d, 0x44, 0x3e,
                0x48, 0xd9, 0x18, 0x1a,
                0xb3, 0x2c, 0x74, 0x21,
            ],
            [
                0x38, 0xf2, 0xc7, 0xae,
                0x10, 0x61, 0x24, 0x15,
                0xd2, 0x7c, 0xa1, 0x90,
                0xd2, 0x7d, 0xa8, 0xb4,
            ],
            [
                0x1b, 0xc7, 0x04, 0xf1,
                0xbc, 0xe1, 0x35, 0xce,
                0xb8, 0x10, 0x34, 0x1b,
                0x21, 0x6d, 0x7a, 0xbe,
            ],
        ];

        for i in 0..plaintexts.len() {
            let plaintext_block = GenericArray::clone_from_slice(&plaintexts[i]);
            let encrypted_block = aes.encrypt_block(plaintext_block);
            assert_eq!(encrypted_block.as_slice(), ciphertexts[i]);
        }
    }

    #[test]
    fn test_shift_rows() {
        #[rustfmt::skip]
        let input = [
            0x20, 0x45, 0x4d, 0xb7,
            0xa3, 0x9d, 0xf9, 0xfb,
            0x7f, 0xb7, 0xaa, 0x40,
            0xa8, 0xf5, 0x9f, 0xb7,
        ];
        let input_state = GenericArray::clone_from_slice(&input);

        let aes = Aes {
            key: Vec::new(),
            key_length: KeyLength::Length128,
        };

        let actual_output = aes.shift_rows(input_state);
        #[rustfmt::skip]
        let expected_output = [
            0x20, 0x9d, 0xaa, 0xb7,
            0xa3, 0xb7, 0x9f, 0xb7,
            0x7f, 0xf5, 0x4d, 0xfb,
            0xa8, 0x45, 0xf9, 0x40,
        ];

        assert_eq!(actual_output.as_slice(), expected_output);
    }

    #[test]
    fn test_mix_col() {
        let inputs = [
            [0xdb, 0x13, 0x53, 0x45],
            [0xf2, 0x0a, 0x22, 0x5c],
            [0x01, 0x01, 0x01, 0x01],
            [0xc6, 0xc6, 0xc6, 0xc6],
            [0xd4, 0xd4, 0xd4, 0xd5],
            [0x2d, 0x26, 0x31, 0x4c],
        ];
        let aes = Aes {
            key: Vec::new(),
            key_length: KeyLength::Length128,
        };

        let expected_outputs = [
            [0x8e, 0x4d, 0xa1, 0xbc],
            [0x9f, 0xdc, 0x58, 0x9d],
            [0x01, 0x01, 0x01, 0x01],
            [0xc6, 0xc6, 0xc6, 0xc6],
            [0xd5, 0xd5, 0xd7, 0xd6],
            [0x4d, 0x7e, 0xbd, 0xf8],
        ];

        for i in 0..inputs.len() {
            let actual_output = aes.mix_col(inputs[i]);
            assert_eq!(actual_output, expected_outputs[i]);
        }
    }

    #[test]
    fn test_mix_cols() {
        let input = [
            0x20, 0x9d, 0xaa, 0xb7, 0xa3, 0xb7, 0x9f, 0xb7, 0x7f, 0xf5, 0x4d, 0xfb, 0xa8, 0x45,
            0xf9, 0x40,
        ];
        let input_state = GenericArray::clone_from_slice(&input);

        let aes = Aes {
            key: Vec::new(),
            key_length: KeyLength::Length128,
        };

        let actual_output = aes.mix_cols(input_state);
        #[rustfmt::skip]
        let expected_output = [
            0xe1, 0x53, 0x30, 0x22,
            0xb7, 0xdb, 0xf3, 0xa3,
            0x4c, 0xa2, 0x06, 0xd4,
            0x3d, 0x72, 0xc4, 0xdf,
        ];

        assert_eq!(actual_output.as_slice(), expected_output);
    }

    #[test]
    fn encrypt_block() {
        let key = *b"YELLOW SUBMARINE";
        let aes = Aes::new(key.to_vec());

        let plaintext = b"ABCDEFGHIJKLMNOP";
        let plaintext_block = GenericArray::clone_from_slice(plaintext);
        let encrypted_block = aes.encrypt_block(plaintext_block);

        #[rustfmt::skip]
        let expected_output = [
            0xf5, 0x45, 0xc0, 0x06,
            0x06, 0x91, 0x26, 0xd9,
            0xc0, 0xf9, 0x3f, 0xa7,
            0xdd, 0x89, 0xab, 0x98,
        ];

        assert_eq!(encrypted_block.as_slice(), expected_output);
    }
}
